///
/// Color utilities
///
/// Depends on:
///
// - ../defaults
///

///
/// Apply border properties for given scheme.
///
/// @arg {Map} $scheme [null]
///     A Color scheme model.
///
/// @arg {String} $prefix [null]
///     If not null will prefix the property names to search.
///
@mixin bb-apply-border($scheme, $prefix: null) {
    $props-prefix: "";

    @if $prefix {
        $props-prefix: $prefix + "-";
    }

    // Prepare property prefix if any
    $props-prefix: "";

    @if $prefix {
        $props-prefix: $prefix + "-";
    }

    $border-shortand: map-get($scheme, $props-prefix + "border");
    $border-color: map-get($scheme, $props-prefix + "border-color");
    $border-width: map-get($scheme, $props-prefix + "border-width");
    $border-style: map-get($scheme, $props-prefix + "border-style");

    @if $border-shortand {
        border: $border-shortand;
    }

    @if $border-color {
        border-color: $border-color;
    }

    @if $border-width {
        border-width: $border-width;
    }

    @if $border-style {
        border-style: $border-style;
    }
}

///
/// Include properties from a scheme color to an element. Mainly used to build
/// blocks and boxes color properties.
///
/// Link properties are never applied to elements with selector name from
/// `$button-classname` (default values is `.btn`).
///
/// Svg properties are never applied to svg elements with selector name
/// `.no-scheme-fill`.
///
/// Color model definition:
/// https://sveetch.github.io/Sveetoy/api/#models-variable-Color%20scheme%20model
///
/// @arg {Map} $scheme [null]
///     A Color scheme model.
///
/// @arg {Bool} $borders [true]
///     If set to `true`, scheme border properties will be used, else they are
///     ignored except if scheme contain the special property "border-apply" that
///     will force border application.
///
/// @arg {Bool} $links [true]
///     If set to `true`, scheme "link-" properties will be used, else
///     they are ignored.
///
/// @arg {Bool} $headings [true]
///     If set to `true`, scheme heading properties ("h1-", "h2-", etc..) will be used, else
///     they are ignored.
///
/// @arg {Bool} $svgs [true]
///     If set to `true`, scheme "svg-" properties will be used, else
///     they are ignored.
///
/// @arg {String} $prefix [null]
///     If not null will prefix the property names to search. This is used in
///     some component like boxes and buttons to apply `hover` behaviors for
///     every scheme properties.
///
/// @example scss
///     $white-color-scheme: (
///             font-color: #000000,
///             background: #ffffff,
///             h1-color: #f0f0f0,
///             h2-color: false,
///             svg-color: #000000,
///     );
///
///     div{
///             @include bb-scheme-colors($white-color-scheme);
///     }
///
/// @example css
///     div{
///             color: #000000;
///             background: #ffffff;
///
///             svg:not(.no-scheme-fill){
///                     fill: #000000;
///             }
///
///             h1, .h1{
///                     color: #f0f0f0;
///             }
///             h2, .h2{}
///             h3, .h3{
///                     color: #000000;
///             }
///             h4, .h4{
///                     color: #000000;
///             }
///             h5, .h5{
///                     color: #000000;
///             }
///             h6, .h6{
///                     color: #000000;
///             }
///     }
///
@mixin bb-scheme-colors(
    $scheme,
    $borders: false,
    $links: bb-scheme-color-default("links"),
    $headings: bb-scheme-color-default("headings"),
    $svgs: bb-scheme-color-default("svgs"),
    $button-classname: bb-scheme-color-default("button-classname"),
    $prefix: null
) {
    // Raise error if background item is not in scheme but not in
    // prefixed mode
    @if not $prefix {
        @if map-get($scheme, "background") == null {
            @error (
                "A scheme color must define the background item, you may use "
                "'transparent' or 'inherit' in last resort."
            );
        } @else if (
            map-get($scheme, "background") == transparent or map-get($scheme, "background") == inherit
        ) and map-get($scheme, "font-color") == null {
            @error (
                "A scheme color must define the font-color item if background value "
                "is 'transparent' or 'inherit'."
            );
        }
    }

    // Prepare property prefix if any
    $props-prefix: "";

    @if $prefix {
        $props-prefix: $prefix + "-";
    }

    // TODO: We should just override $borders if given
    $border-apply: map-get($scheme, $props-prefix + "border-apply");

    @if $border-apply {
        $borders: $border-apply;
    }

    $background: map-get($scheme, $props-prefix + "background");
    $font-color: map-get($scheme, $props-prefix + "font-color");
    $link-color: map-get($scheme, $props-prefix + "link-color");
    $link-color-hover: map-get($scheme, $props-prefix + "link-color-hover");
    $svg-color: map-get($scheme, $props-prefix + "svg-color");

    @if $font-color {
        color: $font-color;
    }

    // Fill svg color but not for elements with ".no-scheme-fill" class
    @if $svgs and $svg-color {
        svg:not(.no-scheme-fill) {
            fill: $svg-color;
        }
    }

    @if $background {
        background: $background;
    }

    // Optional border
    @if $borders {
        @include bb-apply-border($scheme);
    }

    // Titles
    @if $headings {
        @for $i from 1 through 6 {
            h#{$i},
            .h#{$i} {
                @if map-get($scheme, $props-prefix + "h#{$i}-color") == null {
                    color: $font-color;
                } @else if map-get($scheme, $props-prefix + "h#{$i}-color") == false {
                    // 'false' means "Do not define any color on this"
                } @else {
                    color: map-get($scheme, $props-prefix + "h#{$i}-color");
                }
            }
        }
    }

    // Link but not buttons
    @if $links and $link-color {
        a:not(#{$button-classname}) {
            color: if($link-color, $link-color, inherit);

            @if $link-color-hover {
                &:hover {
                    color: if($link-color-hover, $link-color-hover, inherit);
                }
            }
        }
    }
}

///
/// Include properties from a scheme color to a button element.
///
/// Work like `bb-scheme-colors()` mixin except properties for links and
/// titles are ignored.
///
/// @arg {Map} $scheme [null]
///     A Color scheme model.
///
/// @arg {Bool} $borders [false]
///     If set to `true`, scheme border properties will be used, else they are
///     ignored.
///
/// @arg {String} $prefix [null]
///     If not null will prefix the property names to search.
///
/// @arg {Bool} $include-hover [false]
///     If set to `true`, border properties for prefix "hover" will be
///     automatically added.
///
@mixin bb-button-colors($scheme, $borders: false, $prefix: null, $include-hover: false) {
    $props-prefix: "";

    @if $prefix {
        $props-prefix: $prefix + "-";
    }

    $background: map-get($scheme, $props-prefix + "background");
    $font-color: map-get($scheme, $props-prefix + "font-color");
    $svg-color: map-get($scheme, $props-prefix + "svg-color");

    @if $font-color {
        color: $font-color;
    }

    // Fill svg color but not for ".no-scheme-fill" class
    @if $svg-color {
        svg:not(.no-scheme-fill) {
            fill: $svg-color;
        }
    }

    @if $background {
        background: $background;
    }

    @if $borders {
        @include bb-apply-border($scheme, $prefix: $prefix);
    }

    @if $include-hover {
        &:hover {
            @include bb-button-colors($scheme, $borders: $borders, $prefix: "hover");
        }
    }
}
